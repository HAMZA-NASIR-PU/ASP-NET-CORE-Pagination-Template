@page
@model Pagination_Template.Pages.EventsModel
@{
}
<h2>Event List</h2>

<div id="eventTable">
    <!-- Event Table Will Be Dynamically Loaded Here -->
</div>

<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center" id="pagination">
        <!-- Pagination Links Will Be Dynamically Loaded Here -->
    </ul>
</nav>
<!-- Delete Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this event?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Event</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editForm">
                    <input type="hidden" id="editEventId" name="id" />
                    <div class="mb-3">
                        <label for="editTitle" class="form-label">Title</label>
                        <input type="text" class="form-control" id="editTitle" name="title" required>
                    </div>
                    <div class="mb-3">
                        <label for="editStartDate" class="form-label">Start Date</label>
                        <input type="date" class="form-control" id="editStartDate" name="startDate" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.7.2/font/bootstrap-icons.min.css" rel="stylesheet">
    <style>
        th[data-field] {
            cursor: pointer;
        }
    </style>
}
@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@popperjs/core@2.11.6/dist/umd/popper.min.js" integrity="sha384-EEJmJnLxJUWCBfh8Dzi4mII6z4/uPOXfi2aC6j9vGV2alx8bzGaw1pAeKkHHtu5u" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script>
    <script type="text/javascript">
        var token = $('input[name="__RequestVerificationToken"]').val();
        var currentPage = 1;
        var sortField = 'id';
        var sortOrder = 'asc';

        function loadPage(pageNumber) {

            // Update current page
            currentPage = pageNumber;
            $.ajax({
                url: '@Url.Page("/ProductList")',
                type: 'GET',
                data: {
                    pageNumber: pageNumber,
                    sortOrder: sortOrder,
                    sortField: sortField
                },
                headers: {
                    'X-CSRF-TOKEN': token
                },
                success: function (data) {
                    // Populate the product table
                    var eventTable = '<table class="table table-striped table-hover"><thead><tr>' +
                        '<th data-field="id">ID ' + getSortIcon('id') + '</th>' +
                        '<th data-field="title">Title ' + getSortIcon('title') + '</th>' +
                        '<th data-field="start_date">Start Date ' + getSortIcon('start_date') + '</th>' +
                        '<th data-field="end_date">End Date ' + getSortIcon('end_date') + '</th>' +
                        '<th>Actions</th>' +
                        '</tr></thead><tbody>';
                    data.paginatedList.items.forEach(function (item) {
                        eventTable += '<tr><td>' + item.id + '</td><td>' + item.title + '</td><td>' + item.startDate + '</td><td>' + item.endDate + '</td>' +
                            '<td><button class="btn btn-primary btn-sm" onclick="showEditModal(' + item.id + ', \'' + item.title + '\', \'' + item.startDate + '\')"><i class="bi bi-pencil-square"></i> Edit</button> ' +
                            '<button class="btn btn-danger btn-sm" onclick="showDeleteModal(' + item.id + ')"><i class="bi bi-trash"></i> Delete</button></td></tr>';
                    });
                    eventTable += '</tbody></table>';
                    $('#eventTable').html(eventTable);

                    // Populate the pagination controls
                    var pagination = '';
                    var totalPages = data.paginatedList.totalPages;
                    var pageIndex = data.paginatedList.pageIndex;
                    var maxPageLinks = 5;
                    var startPage = Math.max(1, pageIndex - Math.floor(maxPageLinks / 2));
                    var endPage = Math.min(totalPages, startPage + maxPageLinks - 1);

                    if (data.paginatedList.hasPreviousPage) {
                        pagination += '<li class="page-item"><a class="page-link" href="#" onclick="loadPage(' + (pageIndex - 1) + ')">Previous</a></li>';
                    } else {
                        pagination += '<li class="page-item disabled"><span class="page-link">Previous</span></li>';
                    }

                    if (startPage > 1) {
                        pagination += '<li class="page-item"><a class="page-link" href="#" onclick="loadPage(1)">1</a></li>';
                        if (startPage > 2) {
                            pagination += '<li class="page-item disabled"><span class="page-link">...</span></li>';
                        }
                    }

                    for (var i = startPage; i <= endPage; i++) {
                        pagination += '<li class="page-item ' + (i === pageIndex ? 'active' : '') + '"><a class="page-link" href="#" onclick="loadPage(' + i + ')">' + i + '</a></li>';
                    }

                    if (endPage < totalPages) {
                        if (endPage < totalPages - 1) {
                            pagination += '<li class="page-item disabled"><span class="page-link">...</span></li>';
                        }
                        pagination += '<li class="page-item"><a class="page-link" href="#" onclick="loadPage(' + totalPages + ')">' + totalPages + '</a></li>';
                    }

                    if (data.paginatedList.hasNextPage) {
                        pagination += '<li class="page-item"><a class="page-link" href="#" onclick="loadPage(' + (pageIndex + 1) + ')">Next</a></li>';
                    } else {
                        pagination += '<li class="page-item disabled"><span class="page-link">Next</span></li>';
                    }

                    $('#pagination').html(pagination);
                }
            });
        }

        // function changeSortField(sortField) {
        //     // Toggle sort order if the same field is clicked again
        //     if (sortField === currentSortField) {
        //         currentSortOrder = currentSortOrder === 'asc' ? 'desc' : 'asc';
        //     } else {
        //         currentSortOrder = 'asc'; // Reset sort order to asc if different field is clicked
        //     }
        //     currentSortField = sortField; // Update current sort field

        //     // Reload the current page with the updated sort field and order
        //     loadPage(currentPage);
        // }

        function getSortIcon(field) {
            if (sortField === field) {
                return sortOrder === 'asc' ? '<i class="bi bi-arrow-up"></i>' : '<i class="bi bi-arrow-down"></i>';
            }
            return '';
        }

        function showDeleteModal(eventId) {
            $('#confirmDeleteBtn').attr('data-event-id', eventId);
            $('#deleteModal').modal('show');
        }

        function showEditModal(eventId, title, startDate) {
            $('#editEventId').val(eventId);
            $('#editTitle').val(title);
            $('#editStartDate').val(startDate);
            $('#editModal').modal('show');
        }

        $('#confirmDeleteBtn').click(function () {
            var eventId = $(this).attr('data-event-id');
            // Perform delete operation
            $.ajax({
                url: '@Url.Page("/Events")?handler=Delete',
                type: 'POST',
                data: { id: eventId },
                headers: {
                    'X-CSRF-TOKEN': token
                },
                success: function (data) {
                    if (data.success) {
                        // Reload current page after successful deletion
                        loadPage(currentPage);
                    } else {
                        alert(data.message);
                    }
                }
            });
            // Hide the delete modal
            $('#deleteModal').modal('hide');
        });

        $('#editForm').submit(function (e) {
            e.preventDefault();
            var formData = $(this).serialize();
            $.ajax({
                url: '@Url.Page("/Events")?handler=Edit',
                type: 'POST',
                data: form, headers: {
                    'X-CSRF-TOKEN': token
                },
                success: function (data) {
                    if (data.success) {
                        // Reload current page after successful edit
                        loadPage(currentPage);
                    } else {
                        alert(data.message);
                    }
                }
            });
            // Hide the edit modal
            $('#editModal').modal('hide');
        });

        $(document).on('click', 'th[data-field]', function () {
            debugger;
            var field = $(this).attr('data-field');
            if (sortField === field) {
                sortOrder = sortOrder === 'asc' ? 'desc' : 'asc';
            } else {
                sortField = field;
                sortOrder = 'asc';
            }
            loadPage(currentPage);
        });

        $(document).ready(function () {
            loadPage(1); // Load the first page by default with sorting by id in ascending order
        });
    </script>
}